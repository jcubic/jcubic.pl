---
layout: post
title:  "Kolejne 10 pytaÅ„ na rozmowÄ™ rekrutacyjnÄ… z jÄ™zyka JavaScript"
date:   2019-03-31 14:58:55+0200
categories:
tags:  javascript praca
author: jcubic
description: Oto kolejne 10 pytaÅ„ jakie bym zadaÅ‚ na rozmowie rekrutacyjnej z jÄ™zyka JavaScript, czyli najwaÅ¼niejsza czÄ™Å›Ä‡ Front-Endu. Przygotuj siÄ™ na rozmowÄ™ kwalifikacyjnÄ… z JS.
image:
 url: "/img/javascript-interview.jpg"
 alt: "Grafika wektorowa przedstawiajÄ…ca osobÄ™ z laptopem i logo JavaScript"
 width: 800
 height: 464
related:
  -
    name: "15 PytaÅ„ na rozmowÄ™ rekrutacyjnÄ… z React.js"
    url: "/2018/10/pytania-rekrutacyjne-z-react.js.html"
  -
    name: "15 PytaÅ„ na rozmowÄ™ rekrutacyjnÄ… z CSS"
    url: "/2018/10/pytania-rekrutacyjne-css.html"
  -
    name: "5 pytaÅ„ na rozmowÄ™ rekrutacyjnÄ… z jÄ™zyka JavaScript"
    url: "/2017/09/pytania-na-rozmowe-rekrutacyjna-javascript.html"
---

Pytania na rozmowÄ™ rekrutacyjne byÅ‚y bardzo popularne. Do [CSS](/2018/10/pytania-rekrutacyjne-css.html) i
[React](/2018/10/pytania-rekrutacyjne-z-react.js.html) byÅ‚o po 15 pytaÅ„, a tych do jÄ™zyka
[JavaScript byÅ‚o tylko 5](/2017/09/pytania-na-rozmowe-rekrutacyjna-javascript.html). PostanowiÅ‚em wiÄ™c napisaÄ‡ jeszcze
10 pytaÅ„ jakie bym zadaÅ‚ na rozmowie kwalifikacyjnej na stanowisko Front-End developer.

SprawdÅº czy znasz odpowiedÅº na kaÅ¼de z nich.

<!-- more -->

## 1. Jak moÅ¼na zmieniÄ‡ kontekst this metody/funkcji?

moÅ¼na uÅ¼yÄ‡ trzech metod dostÄ™pnych dla funkcji (metod dla obiektÃ³w funkcji): `bind`, `call` oraz `apply`.

## 2. Czym rÃ³Å¼niÄ… siÄ™ `let`, `const` i `var`?

`var` deklaruje zmiennÄ… dla caÅ‚ej funkcji, natomiast `let` oraz `const` dla bloku.

{% highlight javascript %}
for (var i = 0; i < 10; ++i);
console.log(i);
// 10

for (let j = 0; j < 10; ++j);
console.log(j);
// Uncaught ReferenceError: j is not defined
{
    let x = 10;
    console.log(x);
    // 10
}
console.log(x);
// Uncaught ReferenceError: x is not defined
{% endhighlight %}

RÃ³Å¼nica miÄ™dzy `const` a `let` jest taka, Å¼e `const` nie moÅ¼e byÄ‡ ponownie przypisane.  ChociaÅ¼ nie oznacza to staÅ‚ej.
PoniewaÅ¼ gdy wartoÅ›ciÄ… bÄ™dzie obiekt moÅ¼e siÄ™ on zmieniÄ‡ (mutowaÄ‡).

{% highlight javascript %}
const foo = 10;
foo = 20;
// Uncaught TypeError: Assignment to constant variable.
const bar = {};
bar.baz = 10;
console.log(bar);
// {baz: 10}
{% endhighlight %}

## 3. Jakie sÄ… rÃ³Å¼nice miÄ™dzy funkcjÄ… strzaÅ‚kowÄ… od normalnÄ…?

Funkcje strzaÅ‚kowe (ang. arrow function) dostajÄ… kontekst `this` z pierwszej zwykÅ‚ej funkcji nadrzÄ™dnej lub jest
to obiekt window, gdy nie ma Å¼adnej zwykÅ‚ej funkcji w Å‚aÅ„cuchu zakresÃ³w.

{% highlight javascript %}
var x = 10;
const foo = () => this.x;
console.log(foo());
// 10

const bar = {
    x: 10,
    baz: function() {
        return [1,2,3].map((x) => this.x + x);
    }
};
console.log(bar.baz());
// [11, 12, 13]
{% endhighlight %}

Funkcja strzaÅ‚kowa moÅ¼e teÅ¼ wystÄ™powaÄ‡ w dwÃ³ch wersjach:

* skrÃ³conej (wyraÅ¼eniowej)

{% highlight javascript %}
foo = () => 10;
{% endhighlight %}

gdzie wynikiem wywoÅ‚ania funkcji jest pojedyncze wyraÅ¼enie

* rozszerzonej (blokowej)

{% highlight javascript %}
foo = (x) => { console.log(x); return x; }
{% endhighlight %}

Gdzie mamy wszystko to co w zwykÅ‚ej funkcji

Dodatkowo jeÅ›li mamy tylko jeden parametr, moÅ¼na pominÄ…Ä‡ nawiasy:

{% highlight javascript %}
const square = x => x * x;
{% endhighlight %}

Warto teÅ¼ dodaÄ‡, Å¼e aby zwrÃ³ciÄ‡ pojedynczy obiekt uÅ¼ywajÄ…c skrÃ³conej wersji, trzeba uÅ¼yÄ‡ nawiasÃ³w:

{% highlight javascript %}
const obj = arg => ({x: arg});
console.log(obj(10));
// {x:10}
{% endhighlight %}

poniewaÅ¼ gdy nie uÅ¼yjemy nawiasÃ³w, bÄ™dzie to blok z etykietÄ… `x`, a wynikiem wywoÅ‚ania funkcji bÄ™dzie
`undefined`.

{% highlight javascript %}
const obj = arg => {x: arg};
console.log(obj(10));
// undefined
{% endhighlight %}

## 4. Jak uÅ¼waÄ‡ tablicy jak stosu oraz kolejki?

Ciekawe pytanie, ktÃ³re pokazuje takÅ¼e, Å¼e znasz struktury danych.

1. Stos (dodaje na koniec, pobiera z koÅ„ca - czyli LIFO)
  * dodawanie: `a.push(10);`
  * zdejnowanie: `a.pop();`

2. Kolejka (dodaje na koniec, pobiera z poczÄ…tki - czyli FIFO)
  * dodawanie: `a.push(10);`
  * zdejmowanie: `a.shift();`

## 5. Co wyÅ›wietli poniÅ¼szy kod?

{% highlight javascript %}
for (let item of ['foo', 'bar', NaN, 'baz', NaN]) {
    if (item === NaN) {
        console.log('Not a number');
    }
}
{% endhighlight %}

Nie wyÅ›wietli siÄ™ nic poniewaÅ¼, `NaN !== NaN`. Aby sprawdziÄ‡ czy wartoÅ›Ä‡ jest `NaN`, naleÅ¼y uÅ¼yÄ‡ funkcji `isNaN` lub
lepiej `Number.isNaN`. PoniewaÅ¼ funkcja `isNaN` zwrÃ³ci `true` dla wartoÅ›ci `isNaN('x')`, dzieje siÄ™ tak dlatego, gdyÅ¼
konwertuje ona wartoÅ›Ä‡ do liczby przed sprawdzaniem (tak jakby uÅ¼ywaÅ‚a `parseInt`).

## 6. WymieÅ„ metody operacji na plikach w JavaScript (w przeglÄ…darce)

DostÄ™pne sÄ…:

* FileReader API - umoÅ¼liwia czytanie plikÃ³w tekstowych i binarych dodanych do elementu file (html
  `<input type="file"/>`) lub za pomocÄ… drag & drop.  W niektÃ³rych przeglÄ…darkach moÅ¼na teÅ¼ upuszczaÄ‡ caÅ‚y
  katalog (zobacz [wsparcie](https://caniuse.com/#feat=filereader))

* Filesystem API - umoÅ¼liwia utworzenie przestrzeni na dysku i zapis w niej plikÃ³w.
  [Wsparcie jest doÅ›Ä‡ ograniczone](https://caniuse.com/#feat=filesystem)

* Ajax - jest to podstawowe narzÄ™dzie gdy chcemy czytaÄ‡ i zapisywaÄ‡ pliki, dziaÅ‚a tylko z serwerem i to on
  musi obsÅ‚uÅ¼yÄ‡ czytanie i pisanie i zwracaÄ‡ wynik do przeglÄ…darki.

## 7. Co wyÅ›wietli poniÅ¼szy kod?

{% highlight javascript %}
var x = 10;
delete x
console.log(x);
{% endhighlight %}

WyÅ›wietli `10` poniewarz operator `delete` dziaÅ‚a tylko dla pÃ³l obiektÃ³w.

## 8. Co to znaczy Å¼e funkcje sÄ… typem pierwszo klasowym?

Typ pierwszo klasowy oznacza, Å¼e funkcje moÅ¼na uÅ¼ywaÄ‡ wszÄ™dzie tam, gdzie inne wartoÅ›ci. Czyli moÅ¼na je:

* utworzyÄ‡ jako anoniowe wyraÅ¼enie
* przypisaÄ‡ do zmiennej
* uÅ¼yÄ‡ jako elementu struktury danych
* porÃ³wnywaÄ‡ z innymi obiektami
* przekazywaÄ‡ jako argumenty funkcji
* zwracaÄ‡ jako wynik funkcji

## 9. Jakie problemy moÅ¼e sprawiÄ‡ poniÅ¼szy kod odwracajÄ…cy ciÄ…g znakÃ³w?

{% highlight javascript %}
function reverse(str) {
    return str.split('').reverse().join('');
}
{% endhighlight %}

Problemem jest sposÃ³b w jaki JavaScript zapisuje znaki Unicode. NiektÃ³re znaki skÅ‚adajÄ… siÄ™ z kilku
zakodowanych punktÃ³w (ang. code points). SÄ… to tzw. pary surogatÃ³w lub znaki emoji, ktÃ³re mogÄ… siÄ™ skÅ‚adaÄ‡
nawet z 3 zakodowanych punktÃ³w. MogÄ… siÄ™ teÅ¼ zdarzyÄ‡ znaki, ktÃ³re dodajÄ… dodatkowe ozdobniki np. akcenty do
zwykÅ‚ych liter, ktÃ³rych moÅ¼e byÄ‡ wiÄ™cej niÅ¼ jeden.

np.:

{% highlight javascript %}
"manÌƒana".length;
// 7
reverse("manÌƒana")
// "anaÌƒnam"
{% endhighlight %}

poniewaÅ¼ sÅ‚owo zapisane jest jako: 'ma\u{006E}\u{0303}ana'

{% highlight javascript %}
'ğŸ’©'.length;
// 2
reverse('ğŸ’©')
// "ï¿½ï¿½"
{% endhighlight %}

WiÄ™cej o kodowaniu znakÃ³w Unicode w artykule:
["JavaScript has a Unicodeproblem"](https://mathiasbynens.be/notes/javascript-unicode) Mathiasa Bynensa lub jak ktoÅ›
woli jego wystÄ…pienie ["JavaScript â™¥ Unicode" na konferencji JSConf](https://www.youtube.com/watch?v=zi0w7J7MCrk).

## 10. Co wyÅ›wietli poniÅ¼szy kod i dlaczego?

{% highlight javascript %}
function foo() {
    return foo;
}
console.log(new foo() instanceof foo);
{% endhighlight %}

WyÅ›wietli siÄ™ `false`, poniewaÅ¼ funkcja/konstruktor zwraca nowy obiekt, tylko gdy funkcja nic nie zwraca
(zwraca `undefined`). Gdy natomiast zwracana jest jakaÅ› wartoÅ›Ä‡ bÄ™dzie ona wynikiem wywoÅ‚ania tej funkcji z
operatorem `new`.  Operator `instanceof` sprawdza czy wartoÅ›Ä‡ jest instancjÄ… konstruktora. W tym przypadku nie
bÄ™dzie to obiekt tylko funkcja/konstruktor foo (chociaÅ¼ funkcje w JavaScript to teÅ¼ obiekty).
